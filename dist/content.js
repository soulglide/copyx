let s="",h=Date.now();const T=1e3;let y=[];console.log("CopyX: content.ts loaded.");const u=()=>{chrome.storage.local.get("snippets",e=>{e.snippets&&(y=e.snippets,console.log("CopyX: Snippets loaded into cache.",y))})};u();chrome.storage.onChanged.addListener((e,n)=>{n==="local"&&e.snippets&&(console.log("CopyX: Snippets have changed, reloading cache."),u())});document.addEventListener("keydown",async e=>{console.log("CopyX: Keydown event detected.",e.key,"Code:",e.code);const n=e.target;if(!(n.tagName==="INPUT"&&n.type==="text"||n.tagName==="TEXTAREA"||n.isContentEditable)){s="",console.log("CopyX: Not a text input. Buffer reset.");return}if(e.key==="Shift"||e.key==="Control"||e.key==="Alt"||e.key==="Meta"||e.key==="CapsLock"){console.log("CopyX: Modifier key pressed. Ignoring.");return}const r=e.key===" "||e.key==="Enter"||e.key==="Tab";if(Date.now()-h>T&&!r&&(s="",console.log("CopyX: Debounce time exceeded. Buffer reset.")),h=Date.now(),e.isComposing){console.log("CopyX: IME composing. Ignoring keydown.");return}if(r){if(s.length===0)return;e.preventDefault();const c=y.find(d=>d.shortcut===s);c&&await S(n,c,s),s="",console.log("CopyX: Separator processed, buffer reset.");return}e.key==="Backspace"?(s=s.slice(0,-1),console.log("CopyX: Backspace. Buffer:",s)):e.key.length===1?(s+=e.key,console.log("CopyX: Appended to buffer:",s)):console.log("CopyX: Other non-character key. Not appending to buffer.")});async function S(e,n,i){console.log("CopyX: replaceText called with:",e,n,"typedBuffer:",i);let r="",c=0;if(e instanceof HTMLInputElement||e instanceof HTMLTextAreaElement)r=e.value,e.selectionStart,c=e.selectionEnd||0;else if(e.isContentEditable){const t=window.getSelection();if(t&&t.rangeCount>0){const l=t.getRangeAt(0);r=e.innerText,l.startOffset,c=l.endOffset}}console.log("CopyX: Current text before replacement:",r);const d=i.length-n.shortcut.length,X=c-(i.length-d),a=r.slice(0,X),x=r.slice(c);let o=n.snippet;console.log("CopyX: Original snippet text:",o);const g=new Date;if(console.log("CopyX: Current time for placeholders:",g.toLocaleString()),o.includes("${date}")&&(console.log("CopyX: Before date replacement:",o),o=o.replace(/\${date}/g,g.toLocaleDateString()),console.log("CopyX: After date replacement:",o)),o.includes("${time}")&&(console.log("CopyX: Before time replacement:",o),o=o.replace(/\${time}/g,g.toLocaleTimeString()),console.log("CopyX: After time replacement:",o)),o.includes("${datetime}")&&(console.log("CopyX: Before datetime replacement:",o),o=o.replace(/\${datetime}/g,g.toLocaleString()),console.log("CopyX: After datetime replacement:",o)),o.includes("${clipboard}"))try{const t=await navigator.clipboard.readText();o=o.replace("${clipboard}",t),console.log("CopyX: Clipboard content inserted.")}catch(t){console.error("CopyX: Failed to read clipboard contents: ",t)}const p=o.indexOf("${cursor}");o=o.replace("${cursor}","");const f=a+o+x;if(console.log("CopyX: Final snippet text to insert:",o),console.log("CopyX: New text after replacement:",f),e instanceof HTMLInputElement||e instanceof HTMLTextAreaElement)if(e.value=f,p!==-1){const t=a.length+p;e.setSelectionRange(t,t),console.log("CopyX: Cursor set for input/textarea at:",t)}else e.setSelectionRange(a.length+o.length,a.length+o.length),console.log("CopyX: Cursor set for input/textarea at end.");else if(e.isContentEditable)if(e.innerText=f,p!==-1){const t=a.length+p,l=document.createRange(),C=window.getSelection();l.setStart(e.firstChild||e,t),l.collapse(!0),C?.removeAllRanges(),C?.addRange(l),console.log("CopyX: Cursor set for contenteditable at:",t)}else{const t=document.createRange(),l=window.getSelection();t.setStart(e.firstChild||e,a.length+o.length),t.collapse(!0),l?.removeAllRanges(),l?.addRange(t),console.log("CopyX: Cursor set for contenteditable at end.")}}
